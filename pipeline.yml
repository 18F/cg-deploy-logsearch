---
jobs:
- name: deploy-logsearch-staging
  serial_groups: [bosh-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      trigger: true
    - get: common-secrets
      resource: common-staging
      trigger: true
    - get: logsearch-release
    - get: logsearch-for-cf-release
    - get: cg-s3-riemann-release
    - get: logsearch-stemcell
      trigger: true
    - get : terraform-yaml
      resource: terraform-yaml-staging
    # - get: upstream-logsearch-release
  - task: logsearch-manifest
    config: &manifest-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: logsearch-config
      - name: common-secrets
      - name: terraform-yaml
      run:
        path: sh
        args:
          - -exc 
          - | 
            spruce merge \
              --prune terraform_outputs \
              logsearch-config/logsearch-deployment.yml \
              logsearch-config/logsearch-jobs.yml \
              common-secrets/secrets.yml \
              logsearch-config/logsearch-staging.yml \
              terraform-yaml/state.yml \
              > logsearch-manifest/manifest.yml
      outputs:
      - name: logsearch-manifest
  - put: logsearch-staging-deployment
    params: &deploy-params
      cert: common/master-bosh.crt
      manifest: logsearch-manifest/manifest.yml
      releases:
      - logsearch-release/*.tgz
      - logsearch-for-cf-release/*.tgz
      - cg-s3-riemann-release/*.tgz
      # - upstream-logsearch-release/*.tgz
      stemcells:
      - logsearch-stemcell/*.tgz
  on_failure:
    put: slack
    params: &slack-params
      text: |
        :x: FAILED to deploy logsearch on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed logsearch on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-staging
  serial_groups: [bosh-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-staging-deployment
      passed: [deploy-logsearch-staging]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *staging-errand-params
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for logsearch on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for logsearch on staging PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-staging
  serial_groups: [bosh-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-staging-deployment
      passed: [deploy-logsearch-staging]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *staging-errand-params
      BOSH_ERRAND: upload-kibana-objects

- name: push-event-logger-staging
  plan:
  - aggregate:
    - get: event-logger-app
      trigger: true
  - put: deploy-event-logger-app-staging
    params:
      manifest: event-logger-app/manifest.yml
      path: event-logger-app
      current_app_name: cf-app-events-logger
      environment_variables:
        CF_USER: {{cf-admin-username-staging}}
        CF_PASSWORD: {{cf-admin-password-staging}}
        CF_API: {{cf-api-url-staging}}
        FETCH_EVERY: "10"
        CLEAR_CACHE_EVERY: "300"

- name: deploy-logsearch-production
  serial_groups: [bosh-production]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      passed: [deploy-logsearch-staging]
      trigger: true
    - get: common-secrets
      resource: common-prod
      trigger: true
    - get: logsearch-release
    - get: logsearch-for-cf-release
    - get: cg-s3-riemann-release
    - get: logsearch-stemcell
      passed: [deploy-logsearch-staging]
      trigger: true
    # - get: upstream-logsearch-release
    - get: logsearch-staging-deployment
      passed: [smoke-tests-staging]
    - get: terraform-yaml
      resource: terraform-yaml-production
  - task: logsearch-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
          - -exc 
          - | 
            spruce merge \
              --prune terraform_outputs \
              logsearch-config/logsearch-deployment.yml \
              logsearch-jobs.yml \
              common-secrets/secrets.yml \
              logsearch-config/logsearch-production.yml \
              terraform-yaml/state.yml \
              > logsearch-manifest/manifest.yml
  - put: logsearch-production-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: FAILED to deploy logsearch on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed logsearch on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-production
  serial_groups: [bosh-production]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
    - get: logsearch-production-deployment
      passed: [deploy-logsearch-production]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *production-errand-params
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for logsearch on production FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for logsearch on production PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-production
  serial_groups: [bosh-production]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
    - get: logsearch-production-deployment
      passed: [deploy-logsearch-production]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *production-errand-params
      BOSH_ERRAND: upload-kibana-objects

- name: push-event-logger-production
  plan:
  - aggregate:
    - get: event-logger-app
      trigger: true
    - get: deploy-event-logger-app-staging
      passed: [push-event-logger-staging]
  - put: deploy-event-logger-app-production
    params:
      manifest: event-logger-app/manifest.yml
      path: event-logger-app
      current_app_name: cf-app-events-logger
      environment_variables:
        CF_USER: {{cf-admin-username-production}}
        CF_PASSWORD: {{cf-admin-password-production}}
        CF_API: {{cf-api-url-production}}
        FETCH_EVERY: "10"
        CLEAR_CACHE_EVERY: "300"

resources:
- name: master-bosh-root-cert
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{logsearch-private-bucket-production}}
    region_name: {{aws-region}}
    secret_access_key: {{ci-secret-access-key}}
    versioned_file: master-bosh.crt
- name: common-staging
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-staging}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: logsearch.yml
    secrets_passphrase: {{logsearch-staging-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-prod
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-production}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: logsearch.yml
    secrets_passphrase: {{logsearch-production-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: logsearch-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/logsearch-boshrelease

- name: logsearch-for-cf-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/logsearch-for-cloudfoundry

- name: cg-s3-riemann-release
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{cg-s3-bosh-releases-bucket}}
    private: true
    regexp: riemann-(.*).tgz
    secret_access_key: {{ci-secret-access-key}}
    region_name: {{aws-region}}

- name: logsearch-config
  type: git
  source:
    uri: {{cg-deploy-logsearch-git-url}}
    branch: {{cg-deploy-logsearch-git-branch}}

- name: logsearch-stemcell
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{stemcell-bucket}}
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz
    region_name: {{aws-region}}
    secret_access_key: {{ci-secret-access-key}}

- name: logsearch-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{logsearch-staging-deployment-bosh-target}}
    username: {{logsearch-staging-deployment-bosh-username}}
    password: {{logsearch-staging-deployment-bosh-password}}
    deployment: {{logsearch-staging-deployment-bosh-deployment}}
    ignore_ssl: false

- name: logsearch-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{logsearch-production-deployment-bosh-target}}
    username: {{logsearch-production-deployment-bosh-username}}
    password: {{logsearch-production-deployment-bosh-password}}
    deployment: {{logsearch-production-deployment-bosh-deployment}}
    ignore_ssl: false

- name: event-logger-app
  type: git
  source:
    uri: {{event-logger-app-git-url}}
    branch: {{event-logger-app-git-branch}}

- name: deploy-event-logger-app-staging
  type: cf
  source:
    api: {{cf-api-url-staging}}
    username: {{cf-deploy-username-staging}}
    password: {{cf-deploy-password-staging}}
    organization: {{cf-organization-staging}}
    space: {{cf-space-staging}}
    skip_cert_check: false

- name: deploy-event-logger-app-production
  type: cf
  source:
    api: {{cf-api-url-production}}
    username: {{cf-deploy-username-production}}
    password: {{cf-deploy-password-production}}
    organization: {{cf-organization-production}}
    space: {{cf-space-production}}
    skip_cert_check: false

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

- name: tests-timer
  type: time
  source:
    interval: 10m

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-staging}}
    versioned_file: {{tf-state-file-staging}}
    region_name: {{aws-region}}

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-production}}
    versioned_file: {{tf-state-file-production}}
    region_name: {{aws-region}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

staging-errand-params: &staging-errand-params
  BOSH_TARGET: {{logsearch-staging-deployment-bosh-target}}
  BOSH_USERNAME: {{logsearch-staging-deployment-bosh-username}}
  BOSH_PASSWORD: {{logsearch-staging-deployment-bosh-password}}
  BOSH_DEPLOYMENT_NAME: {{logsearch-staging-deployment-bosh-deployment}}
  BOSH_CACERT: common/master-bosh.crt

production-errand-params: &production-errand-params
  BOSH_TARGET: {{logsearch-production-deployment-bosh-target}}
  BOSH_USERNAME: {{logsearch-production-deployment-bosh-username}}
  BOSH_PASSWORD: {{logsearch-production-deployment-bosh-password}}
  BOSH_DEPLOYMENT_NAME: {{logsearch-production-deployment-bosh-deployment}}
  BOSH_CACERT: common/master-bosh.crt
