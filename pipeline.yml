---
jobs:
- name: deploy-logsearch-platform-development
  serial_groups: [bosh-platform-development]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      resource: logsearch-config-development
      trigger: true
    - get: common-secrets
      resource: common-platform-development
      trigger: true
    - get: logsearch-release
      resource: logsearch-release-development
    - get: logsearch-for-cloudfoundry-release
      resource: logsearch-for-cloudfoundry-release-development
    - get: elastalert-release
      resource: elastalert-release-development
    - get: logsearch-stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-development
  - task: logsearch-manifest
    config: &manifest-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: logsearch-config
      - name: common-secrets
      - name: terraform-yaml
      run:
        path: sh
        args:
        - -exc
        - |
          SPRUCE_FILE_BASE_PATH=logsearch-config spruce merge \
            --prune terraform_outputs \
            logsearch-config/logsearch-platform-deployment.yml \
            logsearch-config/logsearch-platform-jobs.yml \
            logsearch-config/logsearch-platform-elastalert.yml \
            common-secrets/secrets.yml \
            logsearch-config/logsearch-platform-development.yml \
            terraform-yaml/state.yml \
            > logsearch-manifest/manifest.yml
      outputs:
      - name: logsearch-manifest
  - &lint-manifest
    task: lint-manifest
    file: pipeline-tasks/lint-manifest.yml
    input_mapping:
      pipeline-config: logsearch-config
      lint-manifest: logsearch-manifest
    params:
      LINTER_CONFIG: bosh-lint.yml
  - put: logsearch-platform-development-deployment
    params: &deploy-params-platform
      cert: common/master-bosh.crt
      manifest: logsearch-manifest/manifest.yml
      releases:
      - logsearch-release/*.tgz
      - logsearch-for-cloudfoundry-release/*.tgz
      - elastalert-release/*.tgz
      stemcells:
      - logsearch-stemcell/*.tgz
  on_failure:
    put: slack
    params: &slack-params
      text: |
        :x: FAILED to deploy platform logsearch on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed platform logsearch on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-platform-development
  serial_groups: [bosh-platform-development]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-platform-development-deployment
      passed: [deploy-logsearch-platform-development]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-development-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-development-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-development-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch-platform
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for platform logsearch on development FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for platform logsearch on development PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-login-platform-development
  serial_groups: [bosh-platform-development]
  plan:
  - aggregate:
    - get: logsearch-config
      resource: logsearch-config-development
    - get: logsearch-development-deployment
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests-login
    file: logsearch-config/smoke-tests-login.yml
    params:
      CF_USERNAME: {{cf-username-development}}
      CF_PASSWORD: {{cf-password-development}}
      CF_SYSTEM_DOMAIN: {{cf-system-domain-development}}
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Login smoke tests for platform logsearch on development FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Login smoke tests for platform logsearch on development PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-platform-development
  serial_groups: [bosh-platform-development]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-platform-development-deployment
      passed: [deploy-logsearch-platform-development]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-development-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-development-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-development-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch-platform
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: upload-kibana-objects

- name: deploy-logsearch-platform-staging
  serial_groups: [bosh-platform-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      trigger: true
    - get: common-secrets
      resource: common-platform-staging
      trigger: true
    - get: logsearch-release
    - get: logsearch-for-cloudfoundry-release
    - get: elastalert-release
    - get: logsearch-stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
  - task: logsearch-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
        - -exc
        - |
          SPRUCE_FILE_BASE_PATH=logsearch-config spruce merge \
            --prune terraform_outputs \
            logsearch-config/logsearch-platform-deployment.yml \
            logsearch-config/logsearch-platform-jobs.yml \
            logsearch-config/logsearch-platform-elastalert.yml \
            common-secrets/secrets.yml \
            logsearch-config/logsearch-platform-staging.yml \
            terraform-yaml/state.yml \
            > logsearch-manifest/manifest.yml
      outputs:
      - name: logsearch-manifest
  - *lint-manifest
  - put: logsearch-platform-staging-deployment
    params: &deploy-params-platform
      cert: common/master-bosh.crt
      manifest: logsearch-manifest/manifest.yml
      releases:
      - logsearch-release/*.tgz
      - logsearch-for-cloudfoundry-release/*.tgz
      - elastalert-release/*.tgz
      stemcells:
      - logsearch-stemcell/*.tgz
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: FAILED to deploy platform logsearch on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed platform logsearch on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-platform-staging
  serial_groups: [bosh-platform-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-platform-staging-deployment
      passed: [deploy-logsearch-platform-staging]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-staging-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-staging-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-staging-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch-platform
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for platform logsearch on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for platform logsearch on staging PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-login-platform-staging
  serial_groups: [bosh-platform-staging]
  plan:
  - aggregate:
    - get: logsearch-config
    - get: logsearch-staging-deployment
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests-login
    file: logsearch-config/smoke-tests-login.yml
    params:
      CF_USERNAME: {{cf-username-staging}}
      CF_PASSWORD: {{cf-password-staging}}
      CF_SYSTEM_DOMAIN: {{cf-system-domain-staging}}
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Login smoke tests for platform logsearch on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Login smoke tests for platform logsearch on staging PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-platform-staging
  serial_groups: [bosh-platform-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-platform-staging-deployment
      passed: [deploy-logsearch-platform-staging]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-staging-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-staging-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-staging-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch-platform
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: upload-kibana-objects

- name: deploy-logsearch-platform-production
  serial_groups: [bosh-platform-production]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      trigger: true
    - get: common-secrets
      resource: common-platform-production
      trigger: true
    - get: logsearch-release
    - get: logsearch-for-cloudfoundry-release
    - get: elastalert-release
    - get: logsearch-stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-production
  - task: logsearch-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
        - -exc
        - |
          SPRUCE_FILE_BASE_PATH=logsearch-config spruce merge \
            --prune terraform_outputs \
            logsearch-config/logsearch-platform-deployment.yml \
            logsearch-config/logsearch-platform-jobs.yml \
            logsearch-config/logsearch-platform-elastalert.yml \
            common-secrets/secrets.yml \
            logsearch-config/logsearch-platform-production.yml \
            terraform-yaml/state.yml \
            > logsearch-manifest/manifest.yml
      outputs:
      - name: logsearch-manifest
  - *lint-manifest
  - put: logsearch-platform-production-deployment
    params: &deploy-params-platform
      cert: common/master-bosh.crt
      manifest: logsearch-manifest/manifest.yml
      releases:
      - logsearch-release/*.tgz
      - logsearch-for-cloudfoundry-release/*.tgz
      - elastalert-release/*.tgz
      stemcells:
      - logsearch-stemcell/*.tgz
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: FAILED to deploy platform logsearch on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed platform logsearch on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-platform-production
  serial_groups: [bosh-platform-production]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-platform-production-deployment
      passed: [deploy-logsearch-platform-production]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-production-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-production-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-production-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch-platform
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for platform logsearch on production FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for platform logsearch on production PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-login-platform-production
  serial_groups: [bosh-platform-production]
  plan:
  - aggregate:
    - get: logsearch-config
    - get: logsearch-production-deployment
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests-login
    file: logsearch-config/smoke-tests-login.yml
    params:
      CF_USERNAME: {{cf-username-production}}
      CF_PASSWORD: {{cf-password-production}}
      CF_SYSTEM_DOMAIN: {{cf-system-domain-production}}
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Login smoke tests for platform logsearch on production FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Login smoke tests for platform logsearch on production PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-platform-production
  serial_groups: [bosh-platform-production]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-platform-production-deployment
      passed: [deploy-logsearch-platform-production]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-production-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-production-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-production-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch-platform
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: upload-kibana-objects

- name: deploy-logsearch-development
  serial_groups: [bosh-development]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      resource: logsearch-config-development
      trigger: true
    - get: common-secrets
      resource: common-development
      trigger: true
    - get: logsearch-release
      resource: logsearch-release-development
    - get: logsearch-for-cloudfoundry-release
      resource: logsearch-for-cloudfoundry-release-development
    - get: elastalert-release
      resource: elastalert-release-development
    - get: cg-s3-riemann-release
    - get: logsearch-stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-development
  - task: logsearch-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
        - -exc
        - |
          SPRUCE_FILE_BASE_PATH=logsearch-config spruce merge \
            --prune terraform_outputs \
            logsearch-config/logsearch-deployment.yml \
            logsearch-config/logsearch-jobs.yml \
            logsearch-config/logsearch-elastalert.yml \
            common-secrets/secrets.yml \
            logsearch-config/logsearch-development.yml \
            terraform-yaml/state.yml \
            > logsearch-manifest/manifest.yml
      outputs:
      - name: logsearch-manifest
  - *lint-manifest
  - put: logsearch-development-deployment
    params: &deploy-params
      cert: common/master-bosh.crt
      manifest: logsearch-manifest/manifest.yml
      releases:
      - logsearch-release/*.tgz
      - logsearch-for-cloudfoundry-release/*.tgz
      - elastalert-release/*.tgz
      - cg-s3-riemann-release/*.tgz
      stemcells:
      - logsearch-stemcell/*.tgz
  on_failure:
    put: slack
    params: &slack-params
      text: |
        :x: FAILED to deploy logsearch on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed logsearch on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-development
  serial_groups: [bosh-development]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-development-deployment
      passed: [deploy-logsearch-development]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-development-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-development-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-development-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for logsearch on development FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for logsearch on development PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-login-development
  serial_groups: [bosh-development]
  plan:
  - aggregate:
    - get: logsearch-config
      resource: logsearch-config-development
    - get: logsearch-development-deployment
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests-login
    file: logsearch-config/smoke-tests-login.yml
    params:
      CF_USERNAME: {{cf-username-development}}
      CF_PASSWORD: {{cf-password-development}}
      CF_SYSTEM_DOMAIN: {{cf-system-domain-development}}
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Login smoke tests for logsearch on development FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Login smoke tests for logsearch on development PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-development
  serial_groups: [bosh-development]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-development-deployment
      passed: [deploy-logsearch-development]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-development-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-development-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-development-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: upload-kibana-objects

- name: deploy-logsearch-staging
  serial_groups: [bosh-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      trigger: true
    - get: common-secrets
      resource: common-staging
      trigger: true
    - get: logsearch-release
    - get: logsearch-for-cloudfoundry-release
    - get: elastalert-release
    - get: cg-s3-riemann-release
    - get: logsearch-stemcell
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
  - task: logsearch-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
        - -exc
        - |
          SPRUCE_FILE_BASE_PATH=logsearch-config spruce merge \
            --prune terraform_outputs \
            logsearch-config/logsearch-deployment.yml \
            logsearch-config/logsearch-jobs.yml \
            logsearch-config/logsearch-elastalert.yml \
            common-secrets/secrets.yml \
            logsearch-config/logsearch-staging.yml \
            terraform-yaml/state.yml \
            > logsearch-manifest/manifest.yml
      outputs:
      - name: logsearch-manifest
  - *lint-manifest
  - put: logsearch-staging-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: FAILED to deploy logsearch on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed logsearch on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-staging
  serial_groups: [bosh-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-staging-deployment
      passed: [deploy-logsearch-staging]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-staging-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-staging-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-staging-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for logsearch on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for logsearch on staging PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-login-staging
  serial_groups: [bosh-staging]
  plan:
  - aggregate:
    - get: logsearch-config
    - get: logsearch-staging-deployment
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests-login
    file: logsearch-config/smoke-tests-login.yml
    params:
      CF_USERNAME: {{cf-username-staging}}
      CF_PASSWORD: {{cf-password-staging}}
      CF_SYSTEM_DOMAIN: {{cf-system-domain-staging}}
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Login smoke tests for logsearch on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Login smoke tests for logsearch on staging PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-staging
  serial_groups: [bosh-staging]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-staging-deployment
      passed: [deploy-logsearch-staging]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-staging-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-staging-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-staging-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: upload-kibana-objects

- name: deploy-logsearch-production
  serial_groups: [bosh-production]
  plan:
  - aggregate:
    - get: common
      resource: master-bosh-root-cert
    - get: pipeline-tasks
    - get: logsearch-config
      passed: [deploy-logsearch-staging]
      trigger: true
    - get: common-secrets
      resource: common-prod
      trigger: true
    - get: logsearch-release
      passed: [deploy-logsearch-staging]
    - get: logsearch-for-cloudfoundry-release
      passed: [deploy-logsearch-staging]
    - get: elastalert-release
      passed: [deploy-logsearch-staging]
    - get: cg-s3-riemann-release
      passed: [deploy-logsearch-staging]
    - get: logsearch-stemcell
      passed: [deploy-logsearch-staging]
      trigger: true
    - get: logsearch-staging-deployment
      passed: [smoke-tests-staging]
    - get: terraform-yaml
      resource: terraform-yaml-production
  - task: logsearch-manifest
    config:
      <<: *manifest-config
      run:
        path: sh
        args:
        - -exc
        - |
          SPRUCE_FILE_BASE_PATH=logsearch-config spruce merge \
            --prune terraform_outputs \
            logsearch-config/logsearch-deployment.yml \
            logsearch-config/logsearch-jobs.yml \
            logsearch-config/logsearch-elastalert.yml \
            common-secrets/secrets.yml \
            logsearch-config/logsearch-production.yml \
            terraform-yaml/state.yml \
            > logsearch-manifest/manifest.yml
  - *lint-manifest
  - put: logsearch-production-deployment
    params: *deploy-params
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: FAILED to deploy logsearch on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      text: |
        :white_check_mark: Successfully deployed logsearch on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-production
  serial_groups: [bosh-production]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
    - get: logsearch-production-deployment
      passed: [deploy-logsearch-production]
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-production-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-production-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-production-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: smoke-tests
      BOSH_FLAGS: "--keep-alive"
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Smoke tests for logsearch on production FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Smoke tests for logsearch on production PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: smoke-tests-login-production
  serial_groups: [bosh-production]
  plan:
  - aggregate:
    - get: logsearch-config
    - get: logsearch-production-deployment
      trigger: true
    - get: tests-timer
      trigger: true
  - task: smoke-tests-login
    file: logsearch-config/smoke-tests-login.yml
    params:
      CF_USERNAME: {{cf-username-production}}
      CF_PASSWORD: {{cf-password-production}}
      CF_SYSTEM_DOMAIN: {{cf-system-domain-production}}
  on_failure:
    put: slack
    params:
      <<: *slack-params
      text: |
        :x: Login smoke tests for logsearch on production FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      <<: *slack-params
      channel: {{slack-news-channel}}
      text: |
        :white_check_mark: Login smoke tests for logsearch on production PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: upload-kibana-objects-production
  serial_groups: [bosh-production]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
    - get: logsearch-production-deployment
      passed: [deploy-logsearch-production]
      trigger: true
  - task: upload-kibana-objects
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{logsearch-production-deployment-bosh-target}}
      BOSH_USERNAME: {{logsearch-production-deployment-bosh-username}}
      BOSH_PASSWORD: {{logsearch-production-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: logsearch
      BOSH_CACERT: common/master-bosh.crt
      BOSH_ERRAND: upload-kibana-objects

resources:
- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: {{logsearch-private-bucket-production}}
    region_name: {{aws-region}}
    versioned_file: master-bosh.crt

- name: common-development
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-development}}
    secrets_file: logsearch-development.yml
    secrets_passphrase: {{logsearch-development-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-staging
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-staging}}
    secrets_file: logsearch.yml
    secrets_passphrase: {{logsearch-staging-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-prod
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-production}}
    secrets_file: logsearch.yml
    secrets_passphrase: {{logsearch-production-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-platform-development
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-development}}
    secrets_file: logsearch-platform-development.yml
    secrets_passphrase: {{logsearch-platform-development-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-platform-staging
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-staging}}
    secrets_file: logsearch-platform.yml
    secrets_passphrase: {{logsearch-platform-staging-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-platform-production
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-production}}
    secrets_file: logsearch-platform.yml
    secrets_passphrase: {{logsearch-platform-production-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- &logsearch-release-tarball
  name: logsearch-release
  type: s3-iam
  source:
    bucket: {{cg-s3-bosh-releases-bucket}}
    regexp: logsearch-([\d\.]*).tgz
    region_name: {{aws-region}}

- &logsearch-for-cloudfoundry-release-tarball
  name: logsearch-for-cloudfoundry-release
  type: s3-iam
  source:
    bucket: {{cg-s3-bosh-releases-bucket}}
    regexp: logsearch-for-cloudfoundry-(.*).tgz
    region_name: {{aws-region}}

- &elastalert-release-tarball
  name: elastalert-release
  type: s3-iam
  source:
    bucket: {{cg-s3-bosh-releases-bucket}}
    regexp: elastalert-(.*).tgz
    region_name: {{aws-region}}

- <<: *logsearch-release-tarball
  name: logsearch-release-development

- <<: *logsearch-for-cloudfoundry-release-tarball
  name: logsearch-for-cloudfoundry-release-development

- <<: *elastalert-release-tarball
  name: elastalert-release-development

- name: cg-s3-riemann-release
  type: s3-iam
  source:
    bucket: {{cg-s3-bosh-releases-bucket}}
    regexp: riemann-(.*).tgz
    region_name: {{aws-region}}

- name: logsearch-config
  type: git
  source:
    uri: {{cg-deploy-logsearch-git-url}}
    branch: {{cg-deploy-logsearch-git-branch}}

- name: logsearch-config-development
  type: git
  source:
    uri: {{cg-deploy-logsearch-development-git-url}}
    branch: {{cg-deploy-logsearch-development-git-branch}}

- name: logsearch-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: logsearch-development-deployment
  type: 18f-bosh-deployment
  source: &bosh-params-development
    target: {{logsearch-development-deployment-bosh-target}}
    username: {{logsearch-development-deployment-bosh-username}}
    password: {{logsearch-development-deployment-bosh-password}}
    deployment: logsearch

- name: logsearch-staging-deployment
  type: 18f-bosh-deployment
  source: &bosh-params-staging
    target: {{logsearch-staging-deployment-bosh-target}}
    username: {{logsearch-staging-deployment-bosh-username}}
    password: {{logsearch-staging-deployment-bosh-password}}
    deployment: logsearch

- name: logsearch-production-deployment
  type: 18f-bosh-deployment
  source: &bosh-params-production
    target: {{logsearch-production-deployment-bosh-target}}
    username: {{logsearch-production-deployment-bosh-username}}
    password: {{logsearch-production-deployment-bosh-password}}
    deployment: logsearch

- name: logsearch-platform-development-deployment
  type: 18f-bosh-deployment
  source:
    <<: *bosh-params-development
    deployment: logsearch-platform

- name: logsearch-platform-staging-deployment
  type: 18f-bosh-deployment
  source:
    <<: *bosh-params-staging
    deployment: logsearch-platform

- name: logsearch-platform-production-deployment
  type: 18f-bosh-deployment
  source:
    <<: *bosh-params-production
    deployment: logsearch-platform

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

- name: tests-timer
  type: time
  source:
    interval: 10m

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-development}}
    versioned_file: {{tf-state-file-development}}
    region_name: {{aws-region}}

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-staging}}
    versioned_file: {{tf-state-file-staging}}
    region_name: {{aws-region}}

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: {{tf-state-bucket-production}}
    versioned_file: {{tf-state-file-production}}
    region_name: {{aws-region}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
