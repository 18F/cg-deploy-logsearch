---
jobs:
- name: deploy-logsearch-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: logsearch-config
      trigger: true
    - get: common-staging
      trigger: true
    - get: cg-s3-logsearch-release
    - get: cg-s3-riemann-release
    - get: logsearch-stemcell
    - get: upstream-logsearch-release
  - task: logsearch-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: logsearch-config
      - name: common-staging
      run:
        path: logsearch-config/generate.sh
        args: ["common-staging/secrets.yml", "logsearch-manifest/manifest.yml"]
      outputs:
      - name: logsearch-manifest
  - put: logsearch-staging-deployment
    params:
      cert: common-staging/boshCA.crt
      manifest: logsearch-manifest/manifest.yml
      releases:
        - cg-s3-logsearch-release/*.tgz
        - cg-s3-riemann-release/*.tgz
        - upstream-logsearch-release/*.tgz
      stemcells:
        - logsearch-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy logsearch on staging
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed logsearch on staging
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}

- name: smoke-tests-staging
  serial_groups: [errand]
  plan:
  - aggregate: &staging-errand-gets
    - get: pipeline-tasks
    - get: common
      resource: common-staging
    - get: logsearch-staging-deployment
      passed: [deploy-logsearch-staging]
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *staging-errand-params
      BOSH_ERRAND: smoke-tests

- name: enable-shard-allocation-staging
  serial_groups: [errand]
  plan:
  - aggregate: *staging-errand-gets
  - task: enable_shard_allocation
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *staging-errand-params
      BOSH_ERRAND: enable_shard_allocation

- name: upload-kibana-dashboards-staging
  serial_groups: [errand]
  plan:
  - aggregate: *staging-errand-gets
  - task: upload-kibana-dashboards
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *staging-errand-params
      BOSH_ERRAND: upload-kibana-dashboards

- name: push-uaa-client-staging
  serial_groups: [errand]
  plan:
  - aggregate: *staging-errand-gets
  - task: uaa-client-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *staging-errand-params
      BOSH_ERRAND: create-uaa-client

- name: push-event-logger-staging
  plan:
  - aggregate:
    - get: event-logger-app
      trigger: true
  - put: deploy-event-logger-app-staging
    params:
      manifest: event-logger-app/manifest.yml
      path: event-logger-app
      current_app_name: cf-app-events-logger
      environment_variables:
        CF_USER: {{cf-admin-username-staging}}
        CF_PASSWORD: {{cf-admin-password-staging}}
        CF_API: {{cf-api-url-staging}}
        FETCH_EVERY: "10"
        CLEAR_CACHE_EVERY: "300"

- name: deploy-logsearch-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: logsearch-config
      trigger: true
    - get: common-prod
      trigger: true
    - get: cg-s3-logsearch-release
    - get: cg-s3-riemann-release
    - get: logsearch-stemcell
    - get: upstream-logsearch-release
    - get: logsearch-staging-deployment
      passed: [smoke-tests-staging]
  - task: logsearch-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: logsearch-config
      - name: common-prod
      run:
        path: logsearch-config/generate.sh
        args: ["common-prod/secrets.yml", "logsearch-manifest/manifest.yml"]
      outputs:
      - name: logsearch-manifest
  - put: logsearch-production-deployment
    params:
      cert: common-prod/boshCA.crt
      manifest: logsearch-manifest/manifest.yml
      releases:
        - cg-s3-logsearch-release/*.tgz
        - cg-s3-riemann-release/*.tgz
        - upstream-logsearch-release/*.tgz
      stemcells:
        - logsearch-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy logsearch on production
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed logsearch on production
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}

- name: smoke-tests-production
  serial_groups: [errand]
  plan:
  - aggregate: &production-errand-gets
    - get: pipeline-tasks
    - get: common
      resource: common-prod
    - get: logsearch-production-deployment
      passed: [deploy-logsearch-production]
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *production-errand-params
      BOSH_ERRAND: smoke-tests

- name: enable-shard-allocation-production
  serial_groups: [errand]
  plan:
  - aggregate: *production-errand-gets
  - task: enable_shard_allocation
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *production-errand-params
      BOSH_ERRAND: enable_shard_allocation

- name: upload-kibana-dashboards-production
  serial_groups: [errand]
  plan:
  - aggregate: *production-errand-gets
  - task: upload-kibana-dashboards
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *production-errand-params
      BOSH_ERRAND: upload-kibana-dashboards

- name: push-uaa-client-production
  serial_groups: [errand]
  plan:
  - aggregate: *production-errand-gets
  - task: uaa-client-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      <<: *production-errand-params
      BOSH_ERRAND: create-uaa-client

- name: push-event-logger-production
  plan:
  - aggregate:
    - get: event-logger-app
      trigger: true
    - get: deploy-event-logger-app-staging
      passed: [push-event-logger-staging]
  - put: deploy-event-logger-app-production
    params:
      manifest: event-logger-app/manifest.yml
      path: event-logger-app
      current_app_name: cf-app-events-logger
      environment_variables:
        CF_USER: {{cf-admin-username-production}}
        CF_PASSWORD: {{cf-admin-password-production}}
        CF_API: {{cf-api-url-production}}
        FETCH_EVERY: "10"
        CLEAR_CACHE_EVERY: "300"

resources:
- name: common-staging
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-staging}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: logsearch.yml
    secrets_passphrase: {{logsearch-staging-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-prod
  type: cg-common
  source:
    bucket_name: {{logsearch-private-bucket-production}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: logsearch.yml
    secrets_passphrase: {{logsearch-production-private-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: upstream-logsearch-release
  type: bosh-io-release
  source:
    repository: logsearch/logsearch-boshrelease

- name: cg-s3-logsearch-release
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{cg-s3-bosh-releases-bucket}}
    private: true
    regexp: logsearch-for-cloudfoundry-(.*).tgz
    secret_access_key: {{ci-secret-access-key}}
    region_name: {{aws-region}}

- name: cg-s3-riemann-release
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{cg-s3-bosh-releases-bucket}}
    private: true
    regexp: riemann-(.*).tgz
    secret_access_key: {{ci-secret-access-key}}
    region_name: {{aws-region}}

- name: logsearch-config
  type: git
  source:
    uri: {{cg-deploy-logsearch-git-url}}
    branch: {{cg-deploy-logsearch-git-branch}}

- name: logsearch-stemcell
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{stemcell-bucket}}
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz
    region_name: {{aws-region}}
    secret_access_key: {{ci-secret-access-key}}

- name: logsearch-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{logsearch-staging-deployment-bosh-target}}
    username: {{logsearch-staging-deployment-bosh-username}}
    password: {{logsearch-staging-deployment-bosh-password}}
    deployment: {{logsearch-staging-deployment-bosh-deployment}}
    ignore_ssl: false

- name: logsearch-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{logsearch-production-deployment-bosh-target}}
    username: {{logsearch-production-deployment-bosh-username}}
    password: {{logsearch-production-deployment-bosh-password}}
    deployment: {{logsearch-production-deployment-bosh-deployment}}
    ignore_ssl: false

- name: event-logger-app
  type: git
  source:
    uri: {{event-logger-app-git-url}}
    branch: {{event-logger-app-git-branch}}

- name: deploy-event-logger-app-staging
  type: cf
  source:
    api: {{cf-api-url-staging}}
    username: {{cf-deploy-username-staging}}
    password: {{cf-deploy-password-staging}}
    organization: {{cf-organization-staging}}
    space: {{cf-space-staging}}
    skip_cert_check: false

- name: deploy-event-logger-app-production
  type: cf
  source:
    api: {{cf-api-url-production}}
    username: {{cf-deploy-username-production}}
    password: {{cf-deploy-password-production}}
    organization: {{cf-organization-production}}
    space: {{cf-space-production}}
    skip_cert_check: false

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

staging-errand-params: &staging-errand-params
  BOSH_TARGET: {{logsearch-staging-deployment-bosh-target}}
  BOSH_USERNAME: {{logsearch-staging-deployment-bosh-username}}
  BOSH_PASSWORD: {{logsearch-staging-deployment-bosh-password}}
  BOSH_DEPLOYMENT_NAME: {{logsearch-staging-deployment-bosh-deployment}}
  BOSH_CACERT: common/boshCA.crt

production-errand-params: &production-errand-params
  BOSH_TARGET: {{logsearch-production-deployment-bosh-target}}
  BOSH_USERNAME: {{logsearch-production-deployment-bosh-username}}
  BOSH_PASSWORD: {{logsearch-production-deployment-bosh-password}}
  BOSH_DEPLOYMENT_NAME: {{logsearch-production-deployment-bosh-deployment}}
  BOSH_CACERT: common/boshCA.crt
